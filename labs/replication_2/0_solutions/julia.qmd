---
title: "Lab2-Solutions"
jupyter: julia-1.10
---

```{julia}
# ] activate .
using CSV, DataFrames, GLM, Random, Plots, CategoricalArrays, TexTables, HDMjl
```


# RCT

## Focus on treatment group 2

```{julia}
data_raw = "https://raw.githubusercontent.com/alexanderquispe/CausalAI-Course/main/data/penn_jae.csv"
data = CSV.read(download(data_raw), DataFrame)

data_f = filter(row -> row[:tg] in [0, 2], data)
# data_f = filter(row -> row.tg == 2 || row.tg == 0, data)
data_f.tg = [tg == 2 ? 1 : 0 for tg in data_f.tg]
# data_f.dep = categorical(data_f.dep)
data_f[!, :dep] = string.(data_f[!, :dep])
data_f[!, :dep] = categorical(data_f[!, :dep])
data_f.t2 = data_f.tg
# first(data_f, 2)
data_f
```

## Plot 2 histograms

```{julia}

hist_i = []
for (i, value) in enumerate([0, 1])
    plot()
    histogram!(
        filter(:tg => ==(1), data_f).inuidur1, label=i,
    )
    push!(hist_i, title!("TG = " * string(value)))
end

plot(hist_i[1], hist_i[2])
```


## Run all spec:

```{julia}
n = 100000
n_cols = 1:50:1000
n_rows = 100:10000:n
@time for n in n_rows
    _x = rand(n, 2)
    _y = randn(n)
    _md = lm(_x, _y)
    GLM.coeftable(_md)
end

@time for i in n_cols
    Random.seed!(i)
    _x = rand(n, i)
    _y = randn(n)
    _md = lm(_x, _y)
    _tbl = GLM.coeftable(_md)
end
```

### CL

```{julia}
function table_lm(fmla, data)
    model = lm(fmla, data)
    tbl = GLM.coeftable(model)
    return DataFrame(tbl)
end

table_lm(@formula(inuidur1 ~ t2), data_f)
```


### CRA


```{julia}
fml_cra = @formula(
    log(inuidur1) ~
        1 + t2 +
        (female * black + female * othrace + female * dep + female * q2 + female * q3 + female * q4 + female * q5 + female * q6 + female * agelt35 + female * agegt54 + female * durable + female * lusd + female * husd + black * othrace + black * dep)
)
@time table_lm(fml_cra, data_f)
```


### IRA

```{julia}
fml_ira = @formula(
    t2 ~ ((
        female * black + female * othrace + female * dep + female * q2 + female * q3 + female * q4 + female * q5 +
        female * q6 + female * agelt35 + female * agegt54 + female * durable + female * lusd + female * husd + black * othrace +
        black * dep + black * q2 + black * q3 + black * q4 + black * q5 + black * q6 + black * agelt35 + black * agegt54 + black * durable +
        black * lusd + black * husd + othrace * dep + othrace * q2 + othrace * q3 + othrace * q4 + othrace * q5 + othrace * q6 +
        othrace * agelt35 + othrace * agegt54 + othrace * durable + othrace * lusd + othrace * husd + dep * q2 + dep * q3 + dep * q4 +
        dep * q5 + dep * q6 + dep * agelt35 + dep * agegt54 + dep * durable + dep * lusd + dep * husd + q2 * q3 + q2 * q4 + q2 * q5 + q2 * q6 +
        q2 * agelt35 + q2 * agegt54 + q2 * durable + q2 * lusd + q2 * husd + q3 * q4 + q3 * q5 + q3 * q6 + q3 * agelt35 + q3 * agegt54 +
        q3 * durable + q3 * lusd + q3 * husd + q4 * q5 + q4 * q6 + q4 * agelt35 + q4 * agegt54 + q4 * durable + q4 * lusd + q4 * husd + q5 * q6 +
        q5 * agelt35 + q5 * agegt54 + q5 * durable + q5 * lusd + q5 * husd + q6 * agelt35 + q6 * agegt54 + q6 * durable + q6 * lusd + q6 * husd +
        agelt35 * agegt54 + agelt35 * durable + agelt35 * lusd + agelt35 * husd + agegt54 * durable + agegt54 * lusd + agegt54 * husd +
        durable * lusd + durable * husd + lusd * husd
    ))
)

sch = schema(fml_ira, data_f)
fml1 = apply_schema(fml_ira, sch)
@time y_, x_ = modelcols(fml1, data_f)
# lm(x_, y_)

# @time table_lm(fml_ira, data_f)
```

### IRA - Lasso (hdm)

```{julia}
ira_lasso_md = @formula(log(inuidur1) ~ t2 + (female * black + female * othrace + female * dep + female * q2 + female * q3 + female * q4 + female * q5 + female * q6 + female * agelt35 + female * agegt54 + female * durable + female * lusd + female * husd + black * othrace + black * dep + black * q2 + black * q3 + black * q4 + black * q5 + black * q6 + black * agelt35 + black * agegt54 + black * durable + black * lusd + black * husd + othrace * dep + othrace * q2 + othrace * q3 + othrace * q4 + othrace * q5 + othrace * q6 + othrace * agelt35 + othrace * agegt54 + othrace * durable + othrace * lusd + othrace * husd + dep * q2 + dep * q3 + dep * q4 + dep * q5 + dep * q6 + dep * agelt35 + dep * agegt54 + dep * durable + dep * lusd + dep * husd + q2 * q3 + q2 * q4 + q2 * q5 + q2 * q6 + q2 * agelt35 + q2 * agegt54 + q2 * durable + q2 * lusd + q2 * husd + q3 * q4 + q3 * q5 + q3 * q6 + q3 * agelt35 + q3 * agegt54 + q3 * durable + q3 * lusd + q3 * husd + q4 * q5 + q4 * q6 + q4 * agelt35 + q4 * agegt54 + q4 * durable + q4 * lusd + q4 * husd + q5 * q6 + q5 * agelt35 + q5 * agegt54 + q5 * durable + q5 * lusd + q5 * husd + q6 * agelt35 + q6 * agegt54 + q6 * durable + q6 * lusd + q6 * husd + agelt35 * agegt54 + agelt35 * durable + agelt35 * lusd + agelt35 * husd + agegt54 * durable + agegt54 * lusd + agegt54 * husd + durable * lusd + durable * husd + lusd * husd))

sch = schema(ira_lasso_md, data_f)
fml1 = apply_schema(ira_lasso_md, sch)
y_, x_ = modelcols(fml1, data_f)

d = DataFrame([x_[:, 1]], :auto)
rename!(d, Dict(:x1 => :t2))

x_1 = DataFrame(hcat(x_[:, 2:end], x_[:, 1] .* x_[:, 2:end]), :auto)


d_reg = rlasso_arg(
    x_1, d,
    nothing, true, true, true, false, false, nothing, 1.1, nothing, 5000, 15, 10^(-5), -Inf, true, Inf, true
)
d_resid = rlasso(d_reg)["residuals"]

y_reg = rlasso_arg(x_1, y_, nothing, true, true, true, false, false,
    nothing, 1.1, nothing, 5000, 15, 10^(-5), -Inf, true, Inf, true)
y_resid = rlasso(y_reg)["residuals"]

d_resid = reshape(d_resid, length(d_resid), 1)
y_resid = reshape(y_resid, length(y_resid), 1)

lm(d_resid, y_resid)

```



# Good and Bad Controls



## Model 1

```{julia}
Random.seed!(1234)

n = 1000

Z = randn(n)
X = 1.2 .* Z + randn(n)
Y = X + 0.7 .* Z + randn(n)


data = DataFrame(Z=Z, X=X, Y=Y)
# describe(data)

#Regressions
function models_tbl(fml1, fml2, data; fml3=0)
    m1 = lm(fml1, data)
    m2 = lm(fml2, data)
    if fml3 != 0
        m3 = lm(fml3, data)
        return regtable(m1, m2, m3)
    end
    return regtable(m1, m2)
end

models_tbl(@formula(Y ~ X), @formula(Y ~ X + Z), data)
```


## Model 3


```{julia}
U = randn(n)
Z = 1.1 .* U + randn(n)
X = 0.2 .* U + randn(n)
Y = X + 0.8 * U + randn(n)
data = DataFrame(z=Z, x=X, y=Y)

models_tbl(
    @formula(y ~ x),
    @formula(y ~ x + z),
    data,
)


```


## Model 4

```{julia}
z = randn(n)
x = 2 .* z + randn(n)
m = x + 8.0 * z + randn(n)
y = m + randn(n)

data = DataFrame(z=Z, x=X, y=Y, m=m)
models_tbl(
    @formula(y ~ x),
    @formula(y ~ x + z),
    data,
    fml3=@formula(y ~ x + z + m)
)

```

## Model 6

```{julia}
U = randn(1000)
Z = 1 .* U + randn(1000)
X = 2.3 .* U + randn(1000)
M = X + Z + randn(1000)
Y = M + randn(1000)

data = DataFrame(
    x=X, y=Y, z=Z, m=M,
)

models_tbl(
    @formula(y ~ x),
    @formula(y ~ x + z),
    data,
    fml3=@formula(y ~ x + z + m)
)
```

## Model 7

```{julia}
U1 = randn(1000)
U2 = randn(1000)
Z = 0.7 .* U1 + 1.3 .* U2 + randn(1000)
X = 1.2 .* U1 + randn(1000)
Y = X + 7 .* U2 + randn(1000)

data = DataFrame(
    x=X, y=Y, z=Z,
)

models_tbl(
    @formula(y ~ x),
    @formula(y ~ x + z),
    data,
)

```



# Error with `^`


```{julia}
reg = @formula(y ~ (x + y)^2)
reg = apply_schema(reg, schema(reg, data))
lm(reg, data)
```

```{julia}

# couples variables combinations 
combinations_upto(x, n) = Iterators.flatten(combinations(x, i) for i in 1:n)

# combinations without same couple
expand_exp(args, deg::ConstantTerm) =
    tuple(((&)(terms...) for terms in combinations_upto(args, deg.n))...)

StatsModels.apply_schema(t::FunctionTerm{typeof(^)}, sch::StatsModels.Schema, ctx::Type) =
    apply_schema.(expand_exp(t.args_parsed...), Ref(sch), ctx)



```

